import org.apache.tools.ant.filters.ReplaceTokens;
import java.nio.file.Paths;

buildscript {
    repositories {
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath 'com.github.node-gradle.node:com.github.node-gradle.node.gradle.plugin:3.4.0'
        classpath "io.openliberty.tools:liberty-gradle-plugin:3.4.1"
    }
}

version = "1.0.0"
group "com.affiancesolutions.kingtiger.server"
description "King Tiger Black Belt Tracker API"

apply plugin: 'java'
apply plugin: 'war'
apply plugin: "liberty"

ext {
    jacocoVersion ="0.8.7"
    junit5Version = "[5.8.1,)"
    microshedVersion = "[0.9.1,)"
    resteasyVersion = "[6.1.0.Final,)"
    resteasyMicroProfileVersion = "[1.0.0.Final,)"
}

// Pull in common repositories...
apply from: layout.projectDirectory.file("gradle/repositories.gradle")

allprojects {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    tasks.withType(Copy) {
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}


//
// Web Application Archive (WAR) Dependencies
//
dependencies {
    // Google Firebase Bill of Materials (BOM)
    //implementation platform('com.google.firebase:firebase-bom:31.1.0')

    // Intra-Project Dependencies (WEB-INF/lib)
    implementation project(':commons')
    implementation project(':ktbtracker-api')

    // Third-Party APIs (WEB-INF/lib)
    //implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-admin:[9.0.0,)'
    //implementation group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.8.0'
    implementation "org.slf4j:slf4j-jdk14:[1.7.36,)"

    // Provided APIs
    providedCompile "org.eclipse.microprofile:microprofile:5.0"
    providedCompile "jakarta.platform:jakarta.jakartaee-api:9.0.0"
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    // Liberty APIs (22.0.0.1+)
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.basics:[1.4.60,)'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.security:[1.3.60,)'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.oauth:[1.2.60,)'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.passwordUtil:[1.0.72,)'
}

//
// Liberty Development Server
//
configurations {
    jdbcDriver
    globalLibrary
}

dependencies {
    // Liberty Gradle Plugin Runtime
    libertyRuntime 'io.openliberty:openliberty-runtime:22.0.0.12'

    // JDBC Driver (Only ONE can be active!)
    //jdbcDriver "mysql:mysql-connector-java:8.0.30"
    jdbcDriver "org.postgresql:postgresql:42.5.1"

    // JAR(s) to be copied into ${shared.config.dir}/lib/global
}

test {
    apply from: layout.projectDirectory.file("gradle/jacoco.gradle")
    useJUnitPlatform()
}


//
// Copy the single specified JDBC driver to ${shared.config.dir}/lib/jdbc
//
task copyJDBCDriver(type: Copy) {
    from configurations.jdbcDriver
    into layout.buildDirectory.dir("wlp/usr/shared/config/lib/jdbc")
}
libertyCreate.finalizedBy copyJDBCDriver

//
// Copy any specified "global" libraries to ${shared.config.dir}/lib/global
//
task copyGlobalLibraries(type: Copy) {
    from configurations.globalLibrary
    into layout.buildDirectory.dir("wlp/usr/shared/config/lib/global")
}
libertyCreate.finalizedBy copyGlobalLibraries

liberty {
    dev {
        dockerRunOpts = "-v /tmp/ktbtracker-1659484356633-444cd448ac34.json:/config/ktbtracker-1659484356633-444cd448ac34.json --env-file=/tmp/ktbtracker-db.env -e DATABASE_HOST=localhost -e DATABASE_PORT=40132"
    }
    server {
        mergeServerEnv = true
        env = [
                'HTTP_PORT'                         : "${http_port}",
                'HTTPS_PORT'                        : "${https_port}",
                'SEC_SSO_REDIRECTTORPHOSTANDPORT'   : "http://localhost:${http_port}",
                'JDBC_DRIVER_PATH'                  : layout.buildDirectory.dir("libs/jdbc").get().asFile,
        ]
    }
}


war {
    // Include the Angular project in the WAR...
    //from project(':web-ui').file("dist")
}
